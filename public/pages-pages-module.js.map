{"version":3,"sources":["webpack:///./src/app/pages/forgotPassword/forgotPassword.component.html","webpack:///./src/app/pages/forgotPassword/forgotPassword.component.ts","webpack:///./src/app/pages/login/login.component.html","webpack:///./src/app/pages/login/login.component.ts","webpack:///./src/app/pages/pages.module.ts","webpack:///./src/app/pages/pages.routing.ts","webpack:///./src/app/pages/register/register.component.html","webpack:///./src/app/pages/register/register.component.ts","webpack:///./src/app/pages/resetpassword/resetpassword.component.html","webpack:///./src/app/pages/resetpassword/resetpassword.component.ts"],"names":[],"mappings":"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","file":"pages-pages-module.js","sourcesContent":["module.exports = \"\\n<div class=\\\"wrapper wrapper-full-page\\\">\\n  <div class=\\\"page-header login-page header-filter\\\" filter-color=\\\"black\\\" style=\\\"background-image: url('./assets/img/login.jpg'); background-size: cover; background-position: top center;\\\">\\n    <div class=\\\"container\\\">\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-lg-4 col-md-6 col-sm-6 ml-auto mr-auto\\\">\\n          <form class=\\\"form\\\" name=\\\"form\\\" (ngSubmit)=\\\"f.form.valid && forgotPassword(f.value)\\\" #f=\\\"ngForm\\\" novalidate>\\n            <div class=\\\"card card-login card-hidden\\\">\\n              <div class=\\\"card-header card-header-rose text-center\\\">\\n                <h4 class=\\\"card-title\\\">Forgot Password</h4>\\n              </div>\\n              <div class=\\\"card-body \\\">\\n                <span class=\\\"bmd-form-group\\\">\\n                  <div class=\\\"input-group\\\" [ngClass]=\\\"{ 'has-error': f.submitted && !emailId.valid }\\\">\\n                    <div class=\\\"input-group-prepend\\\">\\n                      <span class=\\\"input-group-text\\\">\\n                        <i class=\\\"material-icons\\\">email</i>\\n                      </span>\\n                    </div>\\n                    <input type=\\\"email\\\" autocomplete=\\\"off\\\" placeholder=\\\"Enter email\\\" class=\\\"form-control\\\" name=\\\"emailId\\\"\\n                          [(ngModel)]=\\\"model.emailId\\\" #emailId=\\\"ngModel\\\" required ngModel email>\\n                  </div>\\n                  <div *ngIf=\\\"f.submitted && !emailId.valid\\\" class=\\\"help-block\\\" style=\\\"text-align: right;\\\">Email\\n                    is required</div>\\n                </span>\\n              </div>\\n              <div class=\\\"card-footer justify-content-center\\\">\\n                <button type=\\\"submit\\\" class=\\\"btn btn-rose btn-link btn-lg\\\">Submit</button>\\n              </div>\\n            </div>\\n          </form>\\n        </div>\\n      </div>\\n    </div>\\n    <footer class=\\\"footer \\\">\\n      <div class=\\\"container\\\">\\n        <nav class=\\\"pull-left\\\">\\n          <ul>\\n            <li>\\n              <a [routerLink]=\\\"['/about']\\\">\\n                About Us\\n              </a>\\n            </li>\\n            <li>\\n              <a href=\\\"#\\\">\\n                Blog\\n              </a>\\n            </li>\\n          </ul>\\n        </nav>\\n        <div class=\\\"copyright pull-right\\\">\\n          &copy;\\n            {{test | date: 'yyyy'}}, made with <i class=\\\"material-icons\\\">favorite</i> by Jay Bibodi, CSU Sacramento.\\n        </div>\\n      </div>\\n    </footer>\\n  </div>\\n</div>\\n<ngx-spinner bdColor = \\\"rgba(51, 51, 51, 0.8)\\\" size = \\\"large\\\" color = \\\"#fff\\\" type = \\\"square-jelly-box\\\" ></ngx-spinner>\"","import { Component, OnInit, ElementRef, OnDestroy,Input } from '@angular/core';\nimport { Http } from '@angular/http';\nimport { Router } from '@angular/router';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport {Global} from '../../global';\nimport swal from 'sweetalert2';\n\ndeclare var $: any;\n\n@Component({\n    selector: 'app-forgotPassword-cmp',\n    templateUrl: './forgotPassword.component.html'\n})\n\nexport class ForgotPasswordComponent implements OnInit, OnDestroy {\n    test: Date = new Date();\n    private toggleButton: any;\n    private sidebarVisible: boolean;\n    private nativeElement: Node;\n\n    @Input('ngModel')\n    model: any = {};\n\n    constructor(private element: ElementRef,private http: Http,private router: Router,private spinner: NgxSpinnerService) {\n        this.nativeElement = element.nativeElement;\n        this.sidebarVisible = false;\n    }\n\n    ngOnInit() {\n        var navbar : HTMLElement = this.element.nativeElement;\n        this.toggleButton = navbar.getElementsByClassName('navbar-toggle')[0];\n        const body = document.getElementsByTagName('body')[0];\n        body.classList.add('login-page');\n        body.classList.add('off-canvas-sidebar');\n        const card = document.getElementsByClassName('card')[0];\n        setTimeout(function() {\n            // after 1000 ms we add the class animated to the login/register card\n            card.classList.remove('card-hidden');\n        }, 700);\n    }\n\n    sidebarToggle() {\n        var toggleButton = this.toggleButton;\n        var body = document.getElementsByTagName('body')[0];\n        var sidebar = document.getElementsByClassName('navbar-collapse')[0];\n        if (this.sidebarVisible == false) {\n            setTimeout(function() {\n                toggleButton.classList.add('toggled');\n            }, 500);\n            body.classList.add('nav-open');\n            this.sidebarVisible = true;\n        } else {\n            this.toggleButton.classList.remove('toggled');\n            this.sidebarVisible = false;\n            body.classList.remove('nav-open');\n        }\n    }\n    ngOnDestroy(){\n      const body = document.getElementsByTagName('body')[0];\n      body.classList.remove('login-page');\n      body.classList.remove('off-canvas-sidebar');\n    }\n\n    forgotPassword(){\n        console.log(\"Inside forgotPassword\");\n        this.spinner.show();\n        this.http.post(Global.API_ENDPOINT+'/forgotPassword', this.model).subscribe((data) => {\n        var body = JSON.parse(data.text());\n        swal({\n            title: body.status,\n            text: \"\",\n            timer: 3000,\n            showConfirmButton: false\n          }).catch(swal.noop)  \n        this.spinner.hide();\n        }, (err) => { \n            var body = JSON.parse(err.text());\n            this.spinner.hide();\n            swal({\n                title: body.status,\n                text: \"\",\n                timer: 3000,\n                showConfirmButton: false\n              }).catch(swal.noop)  \n        })\n    }\n}","module.exports = \"\\n<div class=\\\"wrapper wrapper-full-page\\\">\\n  <div class=\\\"page-header login-page header-filter\\\" filter-color=\\\"black\\\" style=\\\"background-image: url('./assets/img/login.jpg'); background-size: cover; background-position: top center;\\\">\\n    <div class=\\\"container\\\">\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-lg-4 col-md-6 col-sm-6 ml-auto mr-auto\\\">\\n          <form class=\\\"form\\\" name=\\\"form\\\" (ngSubmit)=\\\"f.form.valid && login(f.value)\\\" #f=\\\"ngForm\\\" novalidate>\\n            <div class=\\\"card card-login card-hidden\\\">\\n              <div class=\\\"card-header card-header-rose text-center\\\">\\n                <h4 class=\\\"card-title\\\">Log in</h4>\\n                <div class=\\\"social-line\\\">\\n                  <a href=\\\"#pablo\\\" class=\\\"btn btn-just-icon btn-link btn-white\\\">\\n                    <i class=\\\"fa fa-facebook-square\\\"></i>\\n                  </a>\\n                  <a href=\\\"#pablo\\\" class=\\\"btn btn-just-icon btn-link btn-white\\\">\\n                    <i class=\\\"fa fa-twitter\\\"></i>\\n                  </a>\\n                  <a href=\\\"#pablo\\\" class=\\\"btn btn-just-icon btn-link btn-white\\\">\\n                    <i class=\\\"fa fa-google-plus\\\"></i>\\n                  </a>\\n                </div>\\n              </div>\\n              <div class=\\\"card-body \\\">\\n                <p class=\\\"card-description text-center\\\">Or Be Classical</p>\\n                <span class=\\\"bmd-form-group\\\">\\n                  <div class=\\\"input-group\\\" [ngClass]=\\\"{ 'has-error': f.submitted && !emailOfPerson.valid }\\\">\\n                    <div class=\\\"input-group-prepend\\\">\\n                      <span class=\\\"input-group-text\\\">\\n                        <i class=\\\"material-icons\\\">email</i>\\n                      </span>\\n                    </div>\\n                    <input type=\\\"email\\\" autocomplete=\\\"off\\\" placeholder=\\\"Enter email\\\" class=\\\"form-control\\\" name=\\\"emailOfPerson\\\"\\n                          [(ngModel)]=\\\"model.emailOfPerson\\\" #emailOfPerson=\\\"ngModel\\\" required ngModel email>\\n                  </div>\\n                  <div *ngIf=\\\"f.submitted && !emailOfPerson.valid\\\" class=\\\"help-block\\\" style=\\\"text-align: right;\\\">Email\\n                    is required</div>\\n                </span>\\n                <span class=\\\"bmd-form-group\\\">\\n                  <div class=\\\"input-group\\\" [ngClass]=\\\"{ 'has-error': f.submitted && !passwordOfPerson.valid }\\\">\\n                    <div class=\\\"input-group-prepend\\\">\\n                      <span class=\\\"input-group-text\\\">\\n                        <i class=\\\"material-icons\\\">lock_outline</i>\\n                      </span>\\n                    </div>\\n                    <input type=\\\"password\\\" autocomplete=\\\"off\\\" placeholder=\\\"Enter password\\\" class=\\\"form-control far fa-eye\\\"\\n                          name=\\\"passwordOfPerson\\\" [(ngModel)]=\\\"model.passwordOfPerson\\\" #passwordOfPerson=\\\"ngModel\\\"\\n                          required />\\n                  </div>\\n                  <div *ngIf=\\\"f.submitted && !passwordOfPerson.valid\\\" class=\\\"help-block\\\" style=\\\"text-align: right;\\\">Password\\n                    is required</div>\\n                </span>\\n              </div>\\n              <div class=\\\"card-footer justify-content-center\\\">\\n                  <a [routerLink]=\\\"['/pages/forgotpassword']\\\" class=\\\"btn btn-rose btn-link btn-lg\\\">\\n                    Forgot Password?\\n                  </a>\\n                <button type=\\\"submit\\\" class=\\\"btn btn-rose btn-link btn-lg\\\">Lets Go</button>\\n              </div>\\n            </div>\\n          </form>\\n        </div>\\n      </div>\\n    </div>\\n    <footer class=\\\"footer \\\">\\n      <div class=\\\"container\\\">\\n        <nav class=\\\"pull-left\\\">\\n          <ul>\\n            <li>\\n              <a [routerLink]=\\\"['/about']\\\">\\n                About Us\\n              </a>\\n            </li>\\n            <li>\\n              <a href=\\\"#\\\">\\n                Blog\\n              </a>\\n            </li>\\n          </ul>\\n        </nav>\\n        <div class=\\\"copyright pull-right\\\">\\n          &copy;\\n            {{test | date: 'yyyy'}}, made with <i class=\\\"material-icons\\\">favorite</i> by Jay Bibodi, CSU Sacramento.\\n        </div>\\n      </div>\\n    </footer>\\n  </div>\\n</div>\\n<ngx-spinner bdColor = \\\"rgba(51, 51, 51, 0.8)\\\" size = \\\"large\\\" color = \\\"#fff\\\" type = \\\"square-jelly-box\\\" ></ngx-spinner>\"","import { Component, OnInit, ElementRef, OnDestroy,Input } from '@angular/core';\nimport { Http } from '@angular/http';\nimport { Router } from '@angular/router';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport {Global} from '../../global';\nimport swal from 'sweetalert2';\n\ndeclare var $: any;\n\n@Component({\n    selector: 'app-login-cmp',\n    templateUrl: './login.component.html'\n})\n\nexport class LoginComponent implements OnInit, OnDestroy {\n    test: Date = new Date();\n    private toggleButton: any;\n    private sidebarVisible: boolean;\n    private nativeElement: Node;\n\n    @Input('ngModel')\n    model: any = {};\n\n    constructor(private element: ElementRef,private http: Http,private router: Router,private spinner: NgxSpinnerService) {\n        this.nativeElement = element.nativeElement;\n        this.sidebarVisible = false;\n    }\n\n    ngOnInit() {\n        var navbar : HTMLElement = this.element.nativeElement;\n        this.toggleButton = navbar.getElementsByClassName('navbar-toggle')[0];\n        const body = document.getElementsByTagName('body')[0];\n        body.classList.add('login-page');\n        body.classList.add('off-canvas-sidebar');\n        const card = document.getElementsByClassName('card')[0];\n        setTimeout(function() {\n            // after 1000 ms we add the class animated to the login/register card\n            card.classList.remove('card-hidden');\n        }, 700);\n    }\n\n    sidebarToggle() {\n        var toggleButton = this.toggleButton;\n        var body = document.getElementsByTagName('body')[0];\n        var sidebar = document.getElementsByClassName('navbar-collapse')[0];\n        if (this.sidebarVisible == false) {\n            setTimeout(function() {\n                toggleButton.classList.add('toggled');\n            }, 500);\n            body.classList.add('nav-open');\n            this.sidebarVisible = true;\n        } else {\n            this.toggleButton.classList.remove('toggled');\n            this.sidebarVisible = false;\n            body.classList.remove('nav-open');\n        }\n    }\n    ngOnDestroy(){\n      const body = document.getElementsByTagName('body')[0];\n      body.classList.remove('login-page');\n      body.classList.remove('off-canvas-sidebar');\n    }\n\n    login(){\n        this.spinner.show();\n        this.http.post(Global.API_ENDPOINT+'/login', this.model).subscribe((data) => {\n        var body = JSON.parse(data.text());\n        localStorage.setItem('emailAddress',body.emailAddress);\n        localStorage.setItem(\"token\",body.token); \n        this.spinner.hide();\n        this.router.navigateByUrl('/tables/latestPodcast');\n        }, (err) => { \n            this.spinner.hide();\n            swal({\n                title: \"Something went wrong!\",\n                text: \"Please try again or contact system administrator!\",\n                timer: 3000,\n                showConfirmButton: false\n              }).catch(swal.noop)  \n        })\n    }\n}","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { MaterialModule } from '../app.module';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { PagesRoutes } from './pages.routing';\n\nimport { RegisterComponent } from './register/register.component';\nimport { LoginComponent } from './login/login.component';\nimport { NgxSpinnerModule } from 'ngx-spinner';\nimport { ForgotPasswordComponent } from './forgotPassword/forgotPassword.component';\nimport { ResetPasswordComponent } from './resetpassword/resetpassword.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild(PagesRoutes),\n    FormsModule,\n    MaterialModule,\n    ReactiveFormsModule,\n    NgxSpinnerModule\n  ],\n  declarations: [\n    LoginComponent,\n    RegisterComponent,\n    ForgotPasswordComponent,\n    ResetPasswordComponent\n  ]\n})\n\nexport class PagesModule {}","import { Routes } from '@angular/router';\n\nimport { RegisterComponent } from './register/register.component';\nimport { LoginComponent } from './login/login.component';\nimport { ForgotPasswordComponent } from './forgotPassword/forgotPassword.component';\nimport { ResetPasswordComponent } from './resetpassword/resetpassword.component'\n\nexport const PagesRoutes: Routes = [\n\n    {\n        path: '',\n        children: [ {\n            path: 'login',\n            component: LoginComponent\n        }, {\n            path: 'register',\n            component: RegisterComponent\n        },{\n            path: 'forgotpassword',\n            component: ForgotPasswordComponent\n        },{\n            path: 'resetpassword/:id',\n            component: ResetPasswordComponent\n        }]\n    }\n];","module.exports = \"<div class=\\\"wrapper wrapper-full-page\\\">\\n  <div class=\\\"page-header register-page header-filter\\\" filter-color=\\\"black\\\" style=\\\"background-image: url('./assets/img/register.jpg'); background-size: cover; background-position: top center;\\\">\\n    <div class=\\\"container\\\">\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-md-10 ml-auto mr-auto\\\">\\n          <div class=\\\"card card-signup\\\">\\n            <h2 class=\\\"card-title text-center\\\">Register</h2>\\n            <div class=\\\"card-body\\\">\\n              <div class=\\\"row\\\">\\n                <div class=\\\"col-md-5 ml-auto\\\">\\n                  <div class=\\\"info info-horizontal\\\">\\n                    <div class=\\\"icon icon-rose\\\">\\n                      <i class=\\\"material-icons\\\">timeline</i>\\n                    </div>\\n                    <div class=\\\"description\\\">\\n                      <h4 class=\\\"info-title\\\">Powered By Ethereum Network</h4>\\n                      <p class=\\\"description\\\">\\n                        We've created decentrailized application for the podcast. Sell and Purchase the podcast with\\n                        ERC-20 Pods Token\\n                      </p>\\n                    </div>\\n                  </div>\\n                  <div class=\\\"info info-horizontal\\\">\\n                    <div class=\\\"icon icon-primary\\\">\\n                      <i class=\\\"material-icons\\\">code</i>\\n                    </div>\\n                    <div class=\\\"description\\\">\\n                      <h4 class=\\\"info-title\\\">Full Profit</h4>\\n                      <p class=\\\"description\\\">\\n                        Get full profit without paying specific amount to share to third party platform.\\n                      </p>\\n                    </div>\\n                  </div>\\n                  <div class=\\\"info info-horizontal\\\">\\n                    <div class=\\\"icon icon-info\\\">\\n                      <i class=\\\"material-icons\\\">group</i>\\n                    </div>\\n                    <div class=\\\"description\\\">\\n                      <h4 class=\\\"info-title\\\">Audience</h4>\\n                      <p class=\\\"description\\\">\\n                        Anyone could publish and sell the podcast to earn tokens.\\n                      </p>\\n                    </div>\\n                  </div>\\n                </div>\\n                <div class=\\\"col-md-5 mr-auto\\\">\\n                  <div class=\\\"social text-center\\\">\\n                    <button mat-raised-button class=\\\"btn btn-just-icon btn-round btn-twitter\\\">\\n                      <i class=\\\"fa fa-twitter\\\"></i>\\n                    </button>\\n                    <button mat-raised-button class=\\\"btn btn-just-icon btn-round btn-dribbble\\\">\\n                      <i class=\\\"fa fa-dribbble\\\"></i>\\n                    </button>\\n                    <button mat-raised-button class=\\\"btn btn-just-icon btn-round btn-facebook\\\">\\n                      <i class=\\\"fa fa-facebook\\\"> </i>\\n                    </button>\\n                    <h4 class=\\\"mt-3\\\"> or be classical </h4>\\n                  </div>\\n                  <form class=\\\"form\\\" name=\\\"form\\\" (ngSubmit)=\\\"f.form.valid && register(f.value)\\\" #f=\\\"ngForm\\\" novalidate>\\n                    <div class=\\\"form-group has-default\\\">\\n                      <div class=\\\"input-group form-group\\\" [ngClass]=\\\"{ 'has-error': f.submitted && !nameOfPerson.valid }\\\">\\n                        <div class=\\\"input-group-prepend\\\">\\n                          <span class=\\\"input-group-text\\\">\\n                            <i class=\\\"material-icons\\\">person</i>\\n                          </span>\\n                        </div>\\n                        <input type=\\\"text\\\" autocomplete=\\\"off\\\" placeholder=\\\"Enter Name\\\" class=\\\"form-control\\\" name=\\\"nameOfPerson\\\"\\n                          [(ngModel)]=\\\"model.nameOfPerson\\\" #nameOfPerson=\\\"ngModel\\\" required />\\n                      </div>\\n                      <div *ngIf=\\\"f.submitted && !nameOfPerson.valid\\\" class=\\\"help-block\\\" style=\\\"text-align: right;\\\">Name\\n                        is required</div>\\n                    </div>\\n                    <div class=\\\"form-group has-default\\\">\\n                      <div class=\\\"input-group form-group\\\" [ngClass]=\\\"{ 'has-error': f.submitted && !emailOfPerson.valid }\\\">\\n                        <div class=\\\"input-group-prepend\\\">\\n                          <span class=\\\"input-group-text\\\">\\n                            <i class=\\\"material-icons\\\">mail</i>\\n                          </span>\\n                        </div>\\n                        <input type=\\\"email\\\" autocomplete=\\\"off\\\" placeholder=\\\"Enter email\\\" class=\\\"form-control\\\" name=\\\"emailOfPerson\\\"\\n                          [(ngModel)]=\\\"model.emailOfPerson\\\" #emailOfPerson=\\\"ngModel\\\" required ngModel email>\\n                      </div>\\n                      <div *ngIf=\\\"f.submitted && !emailOfPerson.valid\\\" class=\\\"help-block\\\" style=\\\"text-align: right;\\\">Email\\n                        is required</div>\\n\\n                    </div>\\n                    <div class=\\\"form-group has-default\\\">\\n                      <div class=\\\"input-group form-group\\\" [ngClass]=\\\"{ 'has-error': f.submitted && !passwordOfPerson.valid }\\\">\\n                        <div class=\\\"input-group-prepend\\\">\\n                          <span class=\\\"input-group-text\\\">\\n                            <i class=\\\"material-icons\\\">lock_outline</i>\\n                          </span>\\n                        </div>\\n                        <input type=\\\"password\\\" autocomplete=\\\"off\\\" placeholder=\\\"Enter password\\\" class=\\\"form-control far fa-eye\\\"\\n                          name=\\\"passwordOfPerson\\\" [(ngModel)]=\\\"model.passwordOfPerson\\\" #passwordOfPerson=\\\"ngModel\\\"\\n                          required />\\n\\n                      </div>\\n                      <div *ngIf=\\\"f.submitted && !passwordOfPerson.valid\\\" class=\\\"help-block\\\" style=\\\"text-align: right;\\\">Password\\n                        is required</div>\\n                    </div>\\n                    <div class=\\\"text-center\\\">\\n                      <button [disabled]=\\\"loading\\\" type=\\\"submit\\\" class=\\\"btn btn-primary btn-round mt-4\\\">Get Started</button>\\n                    </div>\\n                  </form>\\n                </div>\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n    <footer class=\\\"footer \\\">\\n      <div class=\\\"container\\\">\\n        <nav class=\\\"pull-left\\\">\\n          <ul>\\n            <li>\\n              <a [routerLink]=\\\"['/about']\\\">\\n                About Us\\n              </a>\\n            </li>\\n            <li>\\n              <a href=\\\"#\\\">\\n                Blog\\n              </a>\\n            </li>\\n          </ul>\\n        </nav>\\n        <div class=\\\"copyright pull-right\\\">\\n          &copy;\\n          {{test | date: 'yyyy'}}, made with <i class=\\\"material-icons\\\">favorite</i> by Jay Bibodi, CSU Sacramento.\\n        </div>\\n      </div>\\n    </footer>\\n  </div>\\n</div>\\n<ngx-spinner bdColor = \\\"rgba(51, 51, 51, 0.8)\\\" size = \\\"large\\\" color = \\\"#fff\\\" type = \\\"square-jelly-box\\\" ></ngx-spinner>\"","import { Component, OnInit, OnDestroy, Input } from '@angular/core';\nimport { Http } from '@angular/http';\nimport { Router } from '@angular/router';\nimport swal from 'sweetalert2';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport {Global} from '../../global';\n\n@Component({\n  selector: 'app-register-cmp',\n  templateUrl: './register.component.html'\n})\n\nexport class RegisterComponent implements OnInit, OnDestroy {\n  test: Date = new Date();\n\n  @Input('ngModel')\n  model: any = {};\n  loading = false;\n  registerSuccessful = false;\n\n  constructor(private http: Http, private router: Router,private spinner:NgxSpinnerService) { }\n\n  ngOnInit() {\n    const body = document.getElementsByTagName('body')[0];\n    body.classList.add('register-page');\n    body.classList.add('off-canvas-sidebar');\n  }\n\n  ngOnDestroy() {\n    const body = document.getElementsByTagName('body')[0];\n    body.classList.remove('register-page');\n    body.classList.remove('off-canvas-sidebar');\n  }\n\n  register() {\n    this.spinner.show();\n    this.loading = true;\n    this.http.post(Global.API_ENDPOINT+'/signup', this.model).subscribe((data) => {\n      var body = JSON.parse(data.text());\n      localStorage.setItem(\"emailAddress\", body.emailAddress);\n      localStorage.setItem(\"token\", body.token);\n      this.spinner.hide();\n      this.router.navigateByUrl('/tables/latestPodcast');\n    }, (err) => { \n      this.spinner.hide();\n      swal({\n        title: \"Something went wrong!\",\n        text: \"Please try again or contact system administrator!\",\n        timer: 3000,\n        showConfirmButton: false\n      }).catch(swal.noop)\n    })\n  }\n}","module.exports = \"\\n<div class=\\\"wrapper wrapper-full-page\\\">\\n    <div class=\\\"page-header login-page header-filter\\\" filter-color=\\\"black\\\" style=\\\"background-image: url('./assets/img/login.jpg'); background-size: cover; background-position: top center;\\\">\\n      <div class=\\\"container\\\">\\n        <div class=\\\"row\\\">\\n          <div class=\\\"col-lg-4 col-md-6 col-sm-6 ml-auto mr-auto\\\">\\n            <form class=\\\"form\\\" name=\\\"form\\\" (ngSubmit)=\\\"f.form.valid && resetPassword(f.value)\\\" #f=\\\"ngForm\\\" novalidate>\\n              <div class=\\\"card card-login card-hidden\\\">\\n                <div class=\\\"card-header card-header-rose text-center\\\">\\n                  <h4 class=\\\"card-title\\\">Reset Password</h4>\\n                </div>\\n                <div class=\\\"card-body \\\">\\n\\n                  <span class=\\\"bmd-form-group\\\">\\n                    <div class=\\\"input-group\\\" [ngClass]=\\\"{ 'has-error': f.submitted && !newPassword.valid }\\\">\\n                      <div class=\\\"input-group-prepend\\\">\\n                        <span class=\\\"input-group-text\\\">\\n                          <i class=\\\"material-icons\\\">lock_outline</i>\\n                        </span>\\n                      </div>\\n                      <input type=\\\"password\\\" autocomplete=\\\"off\\\" placeholder=\\\"Enter New Password\\\" class=\\\"form-control far fa-eye\\\"\\n                            name=\\\"newPassword\\\" [(ngModel)]=\\\"model.newPassword\\\" #newPassword=\\\"ngModel\\\"\\n                            required />\\n                    </div>\\n                    <div *ngIf=\\\"f.submitted && !newPassword.valid\\\" class=\\\"help-block\\\" style=\\\"text-align: right;\\\">Password\\n                      is required</div>\\n                  </span>\\n                  \\n                  \\n                  <span class=\\\"bmd-form-group\\\">\\n                    <div class=\\\"input-group\\\" [ngClass]=\\\"{ 'has-error': f.submitted && !confirmPassword.valid }\\\">\\n                      <div class=\\\"input-group-prepend\\\">\\n                        <span class=\\\"input-group-text\\\">\\n                          <i class=\\\"material-icons\\\">lock_outline</i>\\n                        </span>\\n                      </div>\\n                      <input type=\\\"password\\\" autocomplete=\\\"off\\\" placeholder=\\\"Confirm password\\\" class=\\\"form-control far fa-eye\\\"\\n                            name=\\\"confirmPassword\\\" [(ngModel)]=\\\"model.confirmPassword\\\" #confirmPassword=\\\"ngModel\\\"\\n                            required />\\n                    </div>\\n                    <div *ngIf=\\\"(f.submitted && !confirmPassword.valid) || inValidConfirmPassword\\\" class=\\\"help-block\\\" style=\\\"text-align: right;\\\">Password did not match</div>\\n                  </span>\\n\\n\\n                </div>\\n                <div class=\\\"card-footer justify-content-center\\\">\\n                  <button type=\\\"submit\\\" class=\\\"btn btn-rose btn-link btn-lg\\\">Reset</button>\\n                </div>\\n              </div>\\n            </form>\\n          </div>\\n        </div>\\n      </div>\\n      <footer class=\\\"footer \\\">\\n        <div class=\\\"container\\\">\\n          <nav class=\\\"pull-left\\\">\\n            <ul>\\n              <li>\\n                <a [routerLink]=\\\"['/about']\\\">\\n                  About Us\\n                </a>\\n              </li>\\n              <li>\\n                <a href=\\\"#\\\">\\n                  Blog\\n                </a>\\n              </li>\\n            </ul>\\n          </nav>\\n          <div class=\\\"copyright pull-right\\\">\\n            &copy;\\n              {{test | date: 'yyyy'}}, made with <i class=\\\"material-icons\\\">favorite</i> by Jay Bibodi, CSU Sacramento.\\n          </div>\\n        </div>\\n      </footer>\\n    </div>\\n  </div>\\n  <ngx-spinner bdColor = \\\"rgba(51, 51, 51, 0.8)\\\" size = \\\"large\\\" color = \\\"#fff\\\" type = \\\"square-jelly-box\\\" ></ngx-spinner>\"","import { Component, OnInit, ElementRef, OnDestroy,Input } from '@angular/core';\nimport { Http } from '@angular/http';\nimport { ActivatedRoute,Router } from '@angular/router';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport {Global} from '../../global';\nimport swal from 'sweetalert2';\n\ndeclare var $: any;\n\n@Component({\n    selector: 'app-resetpassword-cmp',\n    templateUrl: './resetpassword.component.html'\n})\n\nexport class ResetPasswordComponent implements OnInit, OnDestroy {\n    test: Date = new Date();\n    private toggleButton: any;\n    private sidebarVisible: boolean;\n    private nativeElement: Node;\n    private id: string;\n    inValidConfirmPassword = false;\n\n    @Input('ngModel')\n    model: any = {};\n\n    constructor(private element: ElementRef,private http: Http,private router: Router,private route: ActivatedRoute,private spinner: NgxSpinnerService) {\n        this.nativeElement = element.nativeElement;\n        this.sidebarVisible = false;\n    }\n\n    ngOnInit() {\n        this.route.params.subscribe(params => {\n            this.id = params.id;\n            console.log(params.id);\n            console.log(this.id);\n        })\n        \n        var navbar : HTMLElement = this.element.nativeElement;\n        this.toggleButton = navbar.getElementsByClassName('navbar-toggle')[0];\n        const body = document.getElementsByTagName('body')[0];\n        body.classList.add('login-page');\n        body.classList.add('off-canvas-sidebar');\n        const card = document.getElementsByClassName('card')[0];\n        setTimeout(function() {\n            // after 1000 ms we add the class animated to the login/register card\n            card.classList.remove('card-hidden');\n        }, 700);\n    }\n\n    sidebarToggle() {\n        var toggleButton = this.toggleButton;\n        var body = document.getElementsByTagName('body')[0];\n        var sidebar = document.getElementsByClassName('navbar-collapse')[0];\n        if (this.sidebarVisible == false) {\n            setTimeout(function() {\n                toggleButton.classList.add('toggled');\n            }, 500);\n            body.classList.add('nav-open');\n            this.sidebarVisible = true;\n        } else {\n            this.toggleButton.classList.remove('toggled');\n            this.sidebarVisible = false;\n            body.classList.remove('nav-open');\n        }\n    }\n    ngOnDestroy(){\n      const body = document.getElementsByTagName('body')[0];\n      body.classList.remove('login-page');\n      body.classList.remove('off-canvas-sidebar');\n    }\n\n    resetPassword(){\n        console.log(\"Inside resetPassword\");\n        this.model[\"id\"] = this.id;\n        console.log(this.model);\n\n        if(this.model['newPassword'] === this.model['confirmPassword']){\n            this.spinner.show();\n            this.http.post(Global.API_ENDPOINT+'/resetPassword', this.model).subscribe((data) => {\n                var body = JSON.parse(data.text());\n                swal({\n                    title: body.status,\n                    text: \"\",\n                    timer: 3000,\n                    showConfirmButton: false\n                  }).catch(swal.noop)  \n                this.spinner.hide();\n                this.router.navigate([\"pages/login\"]);\n                }, (err) => { \n                    var body = JSON.parse(err.text());\n                    this.spinner.hide();\n                    swal({\n                        title: body.status,\n                        text: \"\",\n                        timer: 3000,\n                        showConfirmButton: false\n                      }).catch(swal.noop)  \n                })    \n        }\n        else{\n            this.inValidConfirmPassword = true;\n        }\n    }\n}"],"sourceRoot":""}